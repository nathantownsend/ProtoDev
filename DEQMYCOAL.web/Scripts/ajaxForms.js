

/* AJAX FORMS
   Developed by Nathan Townsend for Montana DEQ 2014
   Code Source: https://github.com/nathantownsend/MVCAjaxForms

   MVC Html Extensions are used to create buttons and links that open ajax forms within a jQuery modal dialog showing a set of buttons.
   The Save and Cancel buttons are always included. The Delete button only appears if you use the overload with a delete url and callback.

   MVC EXTENSION DEFINITIONS
   @Html.AjaxDialogFormButton(string buttonText, string dialogTitle, string dialogFormUrl, string onSaveCallback)
   @Html.AjaxDialogFormButton(string buttonText, string dialogTitle, string dialogFormUrl, string onSaveCallback, string deleteUrl, string onDeleteCallback)
   @Html.AjaxDialogFormLink(string buttonText, string dialogTitle, string dialogFormUrl, string onSaveCallback)
   @Html.AjaxDialogFormLink(string buttonText, string dialogTitle, string dialogFormUrl, string onSaveCallback, string deleteUrl, string onDeleteCallback)



   JAVASCRIPT
   The following javascript interacts with the generated html from the helper methods above. 


   -----------------------------------------------*/

(function ($) {
    $(document).ready(function () {
        // setup the ajax form dialog
        $("#main").on("click", "*[data-modal-form]", ShowModalForm);
    });
})(jQuery);




// uses attributes generated by the AjaxDialogFormButton/Link calls in MVC to load a form and display it within a jquery modal dialog
// the dialog provides a set of buttons for save, cancel, and delete based on the attributes provided
function ShowModalForm() {
    var url = $(this).attr("data-url");
    var title = $(this).attr("data-title");
    var buttonSet = $(this).attr("data-buttons");
    var deleteUrl = $(this).attr("data-delete-url");
    var onDeleteCallback = $(this).attr("data-on-delete-callback");
    var onSaveCallback = $(this).attr("data-on-save-callback");

    var dialogContent = $("#DialogContent");
    if (dialogContent.length == 0) {
        dialogContent = $('<div id="DialogContent"></div>');
        $("body").append(dialogContent);
    }
    dialogContent.find("*").remove();
    dialogContent.load(url, function () {
        $(this).dialog({
            modal: true,
            title: title,
            width: 600,
            buttons: GetButtons(buttonSet),
            deleteUrl: deleteUrl,
            onDeleteCallback: onDeleteCallback,
            onSaveCallback: onSaveCallback,
            close: function () {
                $(this).dialog("destroy");
                dialogContent.find("*").remove();
            }
        }).buttonArranger();
    });
}




// Provides a convenient way to make an ajax call and perform standard response processing
function AjaxRequest(options) {

    // default settings
    var settings = {
        url: "",
        data: {},
        type: "POST",
        htmlCallback: function (string) { },
        successCallback: function (result) { },
        errorCallback: function (result) { },
        unexpectedCallback: function (result) { },
        showSuccessMessage: true,
        showErrorMessage: true,
        showUnexpectedMessage: true
    };

    // apply options
    settings = jQuery.extend(settings, options);

    // make the ajax call
    jQuery.ajax({
        url: settings.url,
        type: settings.type,
        data: settings.data,
        // process the expected server response
        success: function (response, textStatus, jqXHR) {
            // the response is AjaxResult 
            if (IsAjaxResult(response)) {
                var result = new AjaxResult(response);
                if (result.Successful) {
                    // display a success message
                    if (settings.showSuccessMessage)
                        Message.Show(result.Message);
                    // execute the callback
                    if (settings.successCallback)
                        settings.successCallback(result);
                } else {
                    // display the error message
                    if (settings.showErrorMessage)
                        Message.Show(result.Message, false);
                    // execute the callback
                    if (settings.errorCallback)
                        settings.errorCallback(result);
                }
            // the response is html
            } else {
                // execute the callback for handling html response
                if (settings.htmlCallback)
                    settings.htmlCallback(response);
            }
        },
        // process the unexpected server response
        error: function (jqXHR, textStatus, errorThrown) {
            // display the unexpected message
            if (settings.showUnexpectedMessage)
                Message.Show(errorThrown, false);
            // execute the callback
            if (settings.unexpectedCallback) {
                var result = new AjaxResult({ Status: "UNEXPECTED", Message: errorThrown, Data: { status: textStatus } });
                settings.unexpectedCallback(result);
            }
        }
    });

}



// encapsulates a json response from the MVC controller action that processes the form post. The action returns an AjaxResult class as json
function AjaxResult(data) {
    this.Status = data.Status;
    this.Message = data.Message;
    this.Successful = data.Status == "OK";
    this.Data = data.Data;
}

// returns true if the data returned from an MVC action is an ajax result object
function IsAjaxResult(data) {
    return (data.Status && data.Message);
}


// arranges ajax dialog form buttons in the propper order
jQuery.fn.buttonArranger = function () {
    var pane = $(this).parents(".ui-dialog").find(".ui-dialog-buttonpane");
    var deleteButton = pane.find("button span:contains('Delete')").parent("button");
    if (deleteButton.length == 0)
        return;

    deleteButton.addClass("float-left").fadeTo(1, 0.75);
    var buttonSet = deleteButton.parents(".ui-dialog-buttonset").removeClass("ui-dialog-buttonset").css("text-align", "right");
};


// buttons coded to operate an ajax dialog form
var allButtons = {
    "Delete": AjaxDelete,
    "Save": AjaxSave,
    "Cancel": AjaxDialogCancel,
    "Close": AjaxDialogClose
}


// cancels an ajax form dialog
function AjaxDialogCancel(event, ui) {
    $(this).dialog("close");
}

// closes an ajax form dialog
function AjaxDialogClose(event, ui) {
    $(this).dialog("close");
}

// uses ajax to perform a delete action on an ajax dialog
function AjaxDelete(event, ui) {
    var formDialog = $(this);
    ConfirmationDialog("Confirm Delete", "Are you sure you want to delete this record? Press Ok to proceed.", false, AjaxDeleteCallback, null, formDialog);
}

// when a delete action has been confirmed
function AjaxDeleteCallback(formDialog) {
    var deleteCallback = formDialog.dialog("option", "onDeleteCallback");
    var url = formDialog.dialog("option", "deleteUrl");

    $.ajax(url, {
        type: "POST",
        success: function (data, textStatus, jqXHR) {
            var result = new AjaxResult(data);
            if (result.Successful) {
                // confirm it was deleted
                ConfirmationDialog("Record Deleted", "The record has been deleted", false, function () {
                    if (deleteCallback)
                        window[deleteCallback](result);

                    // close the dialog window
                    formDialog.dialog("close");
                });
            } else {
                // inform that an error occurred
                ConfirmationDialog("Delete Operation Failed", result.Message, true);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            // a server error occurred
            ConfirmationDialog("An unexpected server event caused a failure", errorThrown, true);
        }
    });
}


// uses ajax to perform a save action on an ajax dialog
function AjaxSave(event, ui) {
    var form = $(this).find("form");
    var _self = $(this);
    var onSaveCallback = _self.dialog("option", "onSaveCallback");
    var data = form.serialize();
    var url = form.attr("action");
    var method = form.attr("method");
    $.ajax(url, {
        type: method,
        data: data,
        success: function (data, textStatus, jqXHR) {

            if (typeof data == "object") {

                // if data is an ajax result then use the ajax result data
                if (IsAjaxResult(data)) {
                    var result = new AjaxResult(data);
                    // if ajax result indicates success
                    if (result.Successful) {
                        // if a callback was provided execute it (wrap in try / catch in case of callback error)
                        Message.OK(result.Message);
                        try { window[onSaveCallback](data); } catch (e) { }
                        _self.dialog("close");
                    } else {
                        // if ajax result indicates error show a dialog with the message
                        //ConfirmationDialog("Save Operation Failed", result.Message, true);
                        Message.Error(result.Message);
                    }
                } else {
                    // if a data model is returend as JSON the SetJsonValues function will update any element text wth where the id matches property name with property value
                    // eg. <span id="Name">Old Name</span> will get an updated name if the data object has {Name: "New Name"}
                    // the Html.IDTextFor(m=>m.Name) helper can be used to render such a span element with the id set to the property name
                    SetJsonValues(data);
                    _self.dialog("close");
                }
            }

            // if validation failed on a form the action will return the partial view which is a string in javascript
            if (typeof data == "string") {
                var newForm = data;
                form.after(newForm);
                form.remove();
                form = newForm;
            }
        },
        // jqXHR jqXHR, String textStatus, String errorThrown 
        error: function (jqXHR, textStatus, errorThrown) {
            alert(errorThrown);
        }
    });
}


// returns a string array by parsing a comma separated value string and removing spaces
function GetButtons(buttonSet) {
    var buttons = new Object();

    // the default is SaveCancel
    if (!buttonSet || buttonSet == null || buttonSet == "SaveCancel") {
        buttons["Save"] = allButtons["Save"];
        buttons["Cancel"] = allButtons["Cancel"];
    }

    // Save Cancel Delete
    if (buttonSet == "SaveCancelDelete") {
        buttons["Delete"] = allButtons["Delete"];
        buttons["Save"] = allButtons["Save"];
        buttons["Cancel"] = allButtons["Cancel"];
    }

    // Close Button
    if (buttonSet == "Close") {
        buttons["Close"] = allButtons["Close"];
    }

    return buttons
}


// loops through a Json object and updates the text of elements where the id matches the property name eg. $("#FirstName").text(Json["FirstName"]);
function SetJsonValues(json) {
    for (var id in json) {
        var value = json[id];
        if (value == null)
            $("#" + id).text("");
        else
            $("#" + id).text(value);

        if (typeof value == "object")
            SetJsonValues(value);
    }

}





